service: socket

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'prod'}
  timeout: 20
  region: eu-west-1
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - ${ssm:/echo/ddb/podcasts/arn}
        - ${ssm:/echo/ddb/episodes/arn}
        - ${ssm:/echo/ddb/notifications/arn}
    - Effect: Allow
      Action:
        - execute-api:Invoke
      Resource:
        - arn:aws:execute-api:eu-west-1:818838602878:0li5bdn7tg/*
  environment:
    stage: ${self:provider.stage}
    PI_API_KEY: ${ssm:/echo/pi/key}
    PI_API_SECRET: ${ssm:/echo/pi/secret~true}
    PUBLIC_KEY: ${ssm:/echo/api/PublicKey}

functions:
  socket:
    handler: src/api.socket
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
  episode:
    handler: src/episode.episode
    events:
      - stream:
          type: dynamodb
          arn: ${ssm:/echo/ddb/episodes/streamarn}
          batchSize: 2000
          batchWindow: 1
          maximumRetryAttempts: 2

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  serverless-offline:
    lambdaPort: 3005
    noPrependStageInUrl: true
  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'npm'
    includeModules: true
